name: tpd

permissions:
  contents: read
  packages: write

on:
  push:
    tags:
      - "*.*.*"

jobs:
  set_version:
    runs-on: ubuntu-latest
    steps:
      - name: "Example output creation"
        id: "get_release_version"
        run: |
          RELEASE_VERSION=${GITHUB_REF#refs/*/}
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_OUTPUT
    outputs:
      RELEASE_VERSION: ${{steps.get_release_version.outputs.RELEASE_VERSION}}

  build:
    runs-on: ubuntu-latest
    needs: [set_version]
    steps:
      - name: Checkout code
        uses: actions/checkout@v1

      - name: Login to GitHub Packages
        run: |
          RELEASE_VERSION=${{needs.set_version.outputs.RELEASE_VERSION}}
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io --username dinusha-technovity --password-stdin

          if ! docker pull ghcr.io/dinusha-technovity/composer_runner:$RELEASE_VERSION 2>/dev/null; then
            docker build -f ./prod/dockerfiles/composer_runner.Dockerfile -t ghcr.io/dinusha-technovity/composer_runner:$RELEASE_VERSION .
          fi

          if ! docker pull ghcr.io/dinusha-technovity/npm_runner:$RELEASE_VERSION 2>/dev/null; then
            docker build -f ./prod/dockerfiles/npm_runner.Dockerfile -t ghcr.io/dinusha-technovity/npm_runner:$RELEASE_VERSION .
          fi

          if ! docker pull ghcr.io/dinusha-technovity/optiomax_runner:$RELEASE_VERSION 2>/dev/null; then
            docker build --build-arg USERNAME=dinusha-technovity --build-arg RELEASE_VERSION=$RELEASE_VERSION -f ./prod/dockerfiles/app.Dockerfile -t ghcr.io/dinusha-technovity/optiomax_runner:$RELEASE_VERSION .
          fi
          if ! docker pull ghcr.io/dinusha-technovity/optiomax_runner_proxy:$RELEASE_VERSION 2>/dev/null; then
            docker build -f ./prod/dockerfiles/static.Dockerfile -t ghcr.io/dinusha-technovity/optiomax_runner_proxy:$RELEASE_VERSION .
          fi

          docker push ghcr.io/dinusha-technovity/optiomax_runner:$RELEASE_VERSION
          docker push ghcr.io/dinusha-technovity/optiomax_runner_proxy:$RELEASE_VERSION

  deploy:
    runs-on: ubuntu-latest
    needs: [build, set_version]
    steps:
      - name: Login to Droplet
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io --username dinusha-technovity --password-stdin \
            && cd optiomax/optiomax_runner \
            && docker pull ghcr.io/dinusha-technovity/optiomax_runner:${{ needs.set_version.outputs.RELEASE_VERSION }} \
            && docker pull ghcr.io/dinusha-technovity/optiomax_runner_proxy:${{ needs.set_version.outputs.RELEASE_VERSION }} \
            && VERSION=${{ needs.set_version.outputs.RELEASE_VERSION }} docker compose -f docker-compose-prod.yml up -d --build --remove-orphans \
            && sleep 30 \
            && echo "Checking container status..." \
            && docker ps \
            && echo "Checking if container is healthy..." \
            && docker exec -t optiomax_runner php /var/www/html/artisan --version \
            && echo "Fixing permissions..." \
            && docker exec -t optiomax_runner sh -c "supervisorctl stop all || true" \
            && docker exec -t optiomax_runner sh -c "rm -f /var/www/html/storage/logs/*.log" \
            && docker exec -t optiomax_runner sh -c "mkdir -p /var/www/html/storage/logs /var/www/html/storage/framework/cache /var/www/html/storage/framework/sessions /var/www/html/storage/framework/views /var/www/html/bootstrap/cache" \
            && docker exec -t optiomax_runner sh -c "chown -R www-data:www-data /var/www/html/storage /var/www/html/bootstrap/cache" \
            && docker exec -t optiomax_runner sh -c "chmod -R 777 /var/www/html/storage" \
            && docker exec -t optiomax_runner sh -c "chmod -R 775 /var/www/html/bootstrap/cache" \
            && docker exec -t optiomax_runner sh -c "touch /var/www/html/storage/logs/laravel.log" \
            && docker exec -t optiomax_runner sh -c "chown www-data:www-data /var/www/html/storage/logs/laravel.log" \
            && docker exec -t optiomax_runner sh -c "chmod 666 /var/www/html/storage/logs/laravel.log" \
            && echo "Checking available artisan commands..." \
            && docker exec -t optiomax_runner sh -c "php /var/www/html/artisan list | grep -E '(listen|queue)'" \
            && echo "Starting supervisor processes..." \
            && docker exec -t optiomax_runner sh -c "supervisorctl start all || true" \
            && sleep 10 \
            && echo "Checking supervisor status..." \
            && docker exec -t optiomax_runner sh -c "supervisorctl status" \
            && echo "Checking for any failed processes..." \
            && if docker exec -t optiomax_runner sh -c "supervisorctl status | grep -q ERROR"; then \
                echo "Some processes failed to start, checking logs..."; \
                docker exec -t optiomax_runner sh -c "supervisorctl tail listen-registration stderr"; \
                docker exec -t optiomax_runner sh -c "ls -la /var/www/html/storage/logs/"; \
                echo "Attempting to restart failed processes..."; \
                docker exec -t optiomax_runner sh -c "supervisorctl restart all"; \
                sleep 10; \
                docker exec -t optiomax_runner sh -c "supervisorctl status"; \
              fi \
            && docker logout \
            && docker system prune -af
          

  run-migrations:
    runs-on: ubuntu-latest
    needs: [deploy]
    steps:
      - name: Run Database Migrations
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            docker exec -t optiomax_runner sh -c "php artisan migrate && php artisan passport:install && php artisan tenantss:migrates:all tenant"