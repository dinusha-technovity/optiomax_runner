name: Enterprise Production Release

permissions:
  contents: read
  packages: write

on:
  push:
    tags:
      - "*.*.*"
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  REGISTRY_USERNAME: dinusha-technovity

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Validate deployment readiness
        run: |
          echo "Validating enterprise deployment prerequisites..."
          # Add validation scripts here

  set_version:
    runs-on: ubuntu-latest
    needs: [validate]
    steps:
      - name: Get release version
        id: get_release_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            RELEASE_VERSION=${{ github.event.inputs.version }}
          else
            RELEASE_VERSION=${GITHUB_REF#refs/*/}
          fi
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_OUTPUT
          echo "Deploying version: $RELEASE_VERSION"
    outputs:
      RELEASE_VERSION: ${{steps.get_release_version.outputs.RELEASE_VERSION}}

  security-scan:
    runs-on: ubuntu-latest
    needs: [set_version]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run security scan
        run: |
          echo "Running enterprise security scans..."
          # Add security scanning tools like Trivy, Snyk, etc.

  build:
    runs-on: ubuntu-latest
    needs: [security-scan, set_version]
    strategy:
      matrix:
        component: [composer_runner, npm_runner, optiomax_runner, optiomax_runner_proxy]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push with caching
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./prod/dockerfiles/${{ matrix.component == 'optiomax_runner' && 'app' || matrix.component == 'optiomax_runner_proxy' && 'static' || matrix.component }}.Dockerfile
          build-args: |
            USERNAME=${{ env.REGISTRY_USERNAME }}
            RELEASE_VERSION=${{ needs.set_version.outputs.RELEASE_VERSION }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.REGISTRY_USERNAME }}/${{ matrix.component }}:${{ needs.set_version.outputs.RELEASE_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, set_version]
    environment: staging
    steps:
      - name: Deploy to Staging
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /opt/optiomax/optiomax_runner
            ./deploy.sh staging ${{ needs.set_version.outputs.RELEASE_VERSION }}

  smoke-tests:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    steps:
      - name: Run smoke tests
        run: |
          echo "Running enterprise smoke tests..."
          # Add comprehensive smoke tests

  deploy-production:
    runs-on: ubuntu-latest
    needs: [smoke-tests, set_version]
    environment: production
    strategy:
      matrix:
        region: [us-east, eu-west, asia-pacific]
    steps:
      - name: Deploy to Production Region
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets[format('PROD_{0}_HOST', matrix.region)] }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /opt/optiomax/optiomax_runner
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io --username ${{ env.REGISTRY_USERNAME }} --password-stdin \
            && echo "Cleaning up existing containers..." \
            && docker compose -f docker-compose-prod.yml down --remove-orphans || true \
            && docker container prune -f \
            && echo "Pulling latest images..." \
            && docker pull ${{ env.REGISTRY }}/${{ env.REGISTRY_USERNAME }}/optiomax_runner:${{ needs.set_version.outputs.RELEASE_VERSION }} \
            && docker pull ${{ env.REGISTRY }}/${{ env.REGISTRY_USERNAME }}/optiomax_runner_proxy:${{ needs.set_version.outputs.RELEASE_VERSION }} \
            && echo "Starting new containers..." \
            && VERSION=${{ needs.set_version.outputs.RELEASE_VERSION }} docker compose -f docker-compose-prod.yml up -d --force-recreate --remove-orphans \
            && sleep 30 \
            && echo "Checking container status..." \
            && docker ps \
            && echo "Waiting for application to be ready..." \
            && timeout 60 bash -c 'until docker exec optiomax_runner php /var/www/html/artisan --version; do echo "Waiting for Laravel..."; sleep 5; done' \
            && echo "Application is ready, fixing permissions..." \
            && docker exec -t optiomax_runner sh -c "supervisorctl stop all || true" \
            && docker exec -t optiomax_runner sh -c "rm -f /var/www/html/storage/logs/*.log" \
            && docker exec -t optiomax_runner sh -c "mkdir -p /var/www/html/storage/logs /var/www/html/storage/framework/cache /var/www/html/storage/framework/sessions /var/www/html/storage/framework/views /var/www/html/bootstrap/cache" \
            && docker exec -t optiomax_runner sh -c "chown -R www-data:www-data /var/www/html/storage /var/www/html/bootstrap/cache" \
            && docker exec -t optiomax_runner sh -c "chmod -R 777 /var/www/html/storage" \
            && docker exec -t optiomax_runner sh -c "chmod -R 775 /var/www/html/bootstrap/cache" \
            && docker exec -t optiomax_runner sh -c "touch /var/www/html/storage/logs/laravel.log" \
            && docker exec -t optiomax_runner sh -c "chown www-data:www-data /var/www/html/storage/logs/laravel.log" \
            && docker exec -t optiomax_runner sh -c "chmod 666 /var/www/html/storage/logs/laravel.log" \
            && echo "Verifying artisan commands are available..." \
            && docker exec -t optiomax_runner sh -c "php /var/www/html/artisan list | grep -E '(listen|queue)'" \
            && echo "Starting supervisor processes..." \
            && docker exec -t optiomax_runner sh -c "supervisorctl start all || true" \
            && sleep 15 \
            && echo "Final supervisor status check..." \
            && docker exec -t optiomax_runner sh -c "supervisorctl status" \
            && echo "Checking for any failed processes..." \
            && if docker exec -t optiomax_runner sh -c "supervisorctl status | grep -q ERROR"; then \
                echo "Some processes failed to start, checking logs..."; \
                docker exec -t optiomax_runner sh -c "supervisorctl tail listen-registration stderr" || true; \
                docker exec -t optiomax_runner sh -c "ls -la /var/www/html/storage/logs/" || true; \
                echo "Attempting to restart failed processes..."; \
                docker exec -t optiomax_runner sh -c "supervisorctl restart all" || true; \
                sleep 10; \
                docker exec -t optiomax_runner sh -c "supervisorctl status"; \
                echo "If processes still fail, check logs manually after deployment."; \
              else \
                echo "All supervisor processes started successfully!"; \
              fi \
            && docker logout \
            && docker system prune -af

  run-migrations:
    runs-on: ubuntu-latest
    needs: [deploy-production, set_version]
    environment: production
    strategy:
      matrix:
        region: [us-east, eu-west, asia-pacific]
    steps:
      - name: Run Database Migrations
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets[format('PROD_{0}_HOST', matrix.region)] }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Running database migrations for region: ${{ matrix.region }}..." \
            && cd /opt/optiomax/optiomax_runner \
            && echo "Checking container health before migration..." \
            && docker exec -t optiomax_runner php /var/www/html/artisan --version \
            && echo "Running migrations..." \
            && docker exec -t optiomax_runner sh -c "php artisan migrate --force" \
            && echo "Installing/updating Passport..." \
            && docker exec -t optiomax_runner sh -c "php artisan passport:install --force" \
            && echo "Running tenant migrations..." \
            && docker exec -t optiomax_runner sh -c "php artisan tenantss:migrates:all tenant" \
            && echo "Clearing application caches..." \
            && docker exec -t optiomax_runner sh -c "php artisan config:cache" \
            && docker exec -t optiomax_runner sh -c "php artisan route:cache" \
            && docker exec -t optiomax_runner sh -c "php artisan view:cache" \
            && echo "Migration completed successfully for region: ${{ matrix.region }}"

  post-deployment:
    runs-on: ubuntu-latest
    needs: [run-migrations]
    steps:
      - name: Post-deployment validation
        run: |
          echo "ðŸŽ‰ Enterprise deployment completed successfully!"
          echo "âœ… All regions deployed: us-east, eu-west, asia-pacific"
          echo "âœ… Database migrations completed"
          echo "âœ… Application caches updated"
          echo "ðŸ“Š Deployment metrics and monitoring setup recommended"