name: Enterprise Production Release

permissions:
  contents: read
  packages: write

on:
  push:
    tags:
      - "*.*.*"
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  REGISTRY_USERNAME: dinusha-technovity

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Validate deployment readiness
        run: |
          echo "Validating enterprise deployment prerequisites..."
          # Add validation scripts here

  set_version:
    runs-on: ubuntu-latest
    needs: [validate]
    steps:
      - name: Get release version
        id: get_release_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            RELEASE_VERSION=${{ github.event.inputs.version }}
          else
            RELEASE_VERSION=${GITHUB_REF#refs/*/}
          fi
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_OUTPUT
          echo "Deploying version: $RELEASE_VERSION"
    outputs:
      RELEASE_VERSION: ${{steps.get_release_version.outputs.RELEASE_VERSION}}

  security-scan:
    runs-on: ubuntu-latest
    needs: [set_version]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run security scan
        run: |
          echo "Running enterprise security scans..."
          # Add security scanning tools like Trivy, Snyk, etc.

  build:
    runs-on: ubuntu-latest
    needs: [security-scan, set_version]
    strategy:
      matrix:
        component: [composer_runner, npm_runner, optiomax_runner, optiomax_runner_proxy]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push with caching
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./prod/dockerfiles/${{ matrix.component == 'optiomax_runner' && 'app' || matrix.component == 'optiomax_runner_proxy' && 'static' || matrix.component }}.Dockerfile
          build-args: |
            USERNAME=${{ env.REGISTRY_USERNAME }}
            RELEASE_VERSION=${{ needs.set_version.outputs.RELEASE_VERSION }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.REGISTRY_USERNAME }}/${{ matrix.component }}:${{ needs.set_version.outputs.RELEASE_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, set_version]
    environment: staging
    steps:
      - name: Deploy to Staging
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /opt/optiomax/optiomax_runner
            ./deploy.sh staging ${{ needs.set_version.outputs.RELEASE_VERSION }}

  smoke-tests:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    steps:
      - name: Run smoke tests
        run: |
          echo "Running enterprise smoke tests..."
          # Add comprehensive smoke tests

  deploy-production:
    runs-on: ubuntu-latest
    needs: [smoke-tests, set_version]
    environment: production
    strategy:
      matrix:
        region: [us-east, eu-west, asia-pacific]
    steps:
      - name: Deploy to Production Region
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets[format('PROD_{0}_HOST', matrix.region)] }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /opt/optiomax/optiomax_runner
            ./deploy.sh production ${{ needs.set_version.outputs.RELEASE_VERSION }} ${{ matrix.region }}

  post-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    steps:
      - name: Post-deployment tasks
        run: |
          echo "Running post-deployment validation..."
          # Add monitoring setup, alerts, etc.