install and setup Redis on server or localpc

Step 1: Install Redis locally (if not already)

sudo apt update
sudo apt install redis-server
sudo systemctl start redis-server
(if you are using docker container add redis php extention to docker container)

Step 2: Update Laravel .env (inside your Docker volume)

QUEUE_CONNECTION=redis
CACHE_DRIVER=redis
SESSION_DRIVER=redis
REDIS_HOST=172.17.0.1
REDIS_PORT=6379

Step 3: redis config file edit and allow to all ip

Step 4: check redix connection with laravel tinker or run below commond on your docker root
redis-cli -h 172.17.0.1 ping
result->pong

Step 5: run after below commond on your project root

php artisan check:asset-expiry
php artisan notify:critically-based-asset-schedule
php artisan notify:maintenance-tasks-asset-schedule
php artisan listen:tenant-asset-actions
php artisan queue:work redis --queue=emails or php artisan queue:work redis


php artisan cache:clear
php artisan config:clear
php artisan route:clear
php artisan view:clear

php artisan check:asset-expiry
php artisan listen:tenant-asset-actions
php artisan queue:work redis --queue=emails


---------------------------------------------------------------

setup supervisor with laravel docker.

Local Development Commands (Run in separate terminals):

# Terminal 1: Start the tenant registration queue worker
php artisan queue:work redis --queue=tenant-registration --sleep=1 --tries=5 --timeout=300 --memory=512

# Terminal 2: Start the general queue worker (for emails and other jobs)
php artisan queue:work redis --queue=default,emails --sleep=1 --tries=3 --timeout=300 --memory=512

# Terminal 3: Run the tenant registration listener
php artisan listen:tenant-registration-actions --batch=10

# Terminal 4: (Optional) Monitor the queues
php artisan listen:tenant-registration-actions --monitor

Production Commands (Single terminal for testing):

# Start combined queue worker for both tenant-registration and default queues
php artisan queue:work redis --queue=tenant-registration,default,emails --sleep=1 --tries=3 --timeout=300 --memory=512

# In another terminal, run the listener
php artisan listen:tenant-registration-actions --batch=10 --daemon

Local Testing Commands:

# Check queue status
php artisan queue:monitor

# Clear failed jobs
php artisan queue:clear redis
php artisan queue:flush

# Debug specific registration
php artisan debug:tenant-registration --id=27

# View enterprise monitoring
php artisan listen:tenant-registration-actions --monitor

Health Check Commands:

# Test database connection
php artisan tinker
>>> DB::select('SELECT 1');

# Test Redis connection
>>> Redis::ping();

# Check storage permissions
>>> is_writable(storage_path('logs'));

Quick Setup for Local Development:

1. Start Redis: sudo systemctl start redis-server
2. Clear caches: php artisan cache:clear && php artisan config:clear
3. Start queue worker: php artisan queue:work redis --queue=tenant-registration,default,emails
4. Start listener: php artisan listen:tenant-registration-actions --batch=5
5. Monitor: php artisan listen:tenant-registration-actions --monitor